name: 'Terraform Init'
description: 'terraform init commands'
inputs:
  aws_account_number:
    description: 'Account Number'
    required: true
    default: '067408622363'
  aws_role_name:
    description: 'Aws role with polices to deploy'
    required: true
    default: 'github-actions'
  aws_region: 
    description: 'Aws region'
    required: true
    default: 'us-east-1'
  terraform_state_file:
    description: 'State file Terraform'
    required: true
  terraform_bucket_name:
    description: 'Bucket Terraform'
    required: true
  terraform_directory:
    description: 'Directory containing Terraform files'
    required: false
    default: ''
  github_app_id:
    description: 'App Id'
    required: true
  github_installation_id:
    description: 'Installation ID'
    required: true
  pem_key:
    description: 'Private key'
    required: true


runs:
  using: composite
  steps:
  - name: Checkout code
    uses: actions/checkout@v4

  - name: configure aws credentials
    uses: aws-actions/configure-aws-credentials@v4
    with:
      role-to-assume: arn:aws:iam::${{ inputs.aws_account_number }}:role/${{ inputs.aws_role_name }}
      role-session-name: ${{ inputs.aws_role_name }}
      aws-region: ${{ inputs.aws_region }}

  - name: Gerar Token de Acesso
    shell: bash
    env:
      PEM_KEY: ${{ inputs.github_app_id }}
      GITHUB_APP_ID: ${{ inputs.github_installation_id }}
      GITHUB_APP_INSTALLATION_ID: ${{ inputs.pem_key }}
    run: |
      # Criar arquivo de chave privada
      echo "$PEM_KEY" > private-key.pem

      # Gerar token JWT
      iat=$(date +%s)
      exp=$(($iat + 600))
      header=$(echo -n '{"alg":"RS256","typ":"JWT"}' | base64 -w 0 | tr -d '=' | tr '/+' '_-' | tr -d '\n')
      payload=$(echo -n "{\"iat\":$iat,\"exp\":$exp,\"iss\":\"$GITHUB_APP_ID\"}" | base64 -w 0 | tr -d '=' | tr '/+' '_-' | tr -d '\n')
      unsigned_token="$header.$payload"
      signature=$(echo -n "$unsigned_token" | openssl dgst -sha256 -sign private-key.pem | base64 -w 0 | tr -d '=' | tr '/+' '_-' | tr -d '\n')
      jwt_token="$unsigned_token.$signature"

      # Solicitar token de acesso
      response=$(curl -s -X POST -H "Authorization: Bearer $jwt_token" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/app/installations/$GITHUB_APP_INSTALLATION_ID/access_tokens")
      
      # Verificar resposta
      if [ $(echo "$response" | jq -r .token) == "null" ]; then
        echo "Falha ao obter o token de acesso."
        echo "Resposta: $response"
        exit 1
      else
        access_token=$(echo "$response" | jq -r .token)
        echo "Token de acesso gerado com sucesso: $access_token"
      fi

      # Remover chave privada
      rm private-key.pem

  - name: Terraform Init
    if: ${{ inputs.terraform_directory != '' }} # Executa apenas se terraform_directory n達o estiver vazio
    shell: bash
    run: |
      cd ${{ inputs.terraform_directory }}
      terraform init -backend-config=bucket=${{ inputs.terraform_bucket_name }} -backend-config=key=${{ inputs.terraform_state_file }} -backend-config=region=us-east-1
      ls -ltra

  - name: Terraform Init
    if: ${{ inputs.terraform_directory == '' }} # Executa apenas se terraform_directory n達o estiver vazio
    shell: bash
    run: |
      terraform init -backend-config=bucket=${{ inputs.terraform_bucket_name }} -backend-config=key=${{ inputs.terraform_state_file }} -backend-config=region=us-east-1
      ls -ltra
      
  - name: Upload artifact
    if: ${{ inputs.terraform_directory == '' }} # Executa apenas se terraform_directory n達o estiver vazio
    uses: actions/upload-artifact@v4
    with:
      name: terraform
      path: .
      retention-days: 1

  - name: Upload artifact
    if: ${{ inputs.terraform_directory != '' }} # Executa apenas se terraform_directory n達o estiver vazio
    uses: actions/upload-artifact@v4
    with:
      name: terraform
      path: |
        ${{ inputs.terraform_directory }}
        ${{ inputs.terraform_directory }}/.terraform
      retention-days: 1
